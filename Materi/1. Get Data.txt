Langkah untuk Get data

1. Inside the /services folder, create a file called coin_repository.dart. This file will be responsible to communicate with the outside world and fetch the data we need in the app.
2. Create a CoinRepository class that contains 1 static variable _baseUrl which will be the URL from min-API that we'll use to fetch data. Make sure to already copy the imports as you will need them later in the lesson.

        import 'dart:convert';
        import '../model/coin.dart';
        import '../model/data_error.dart';
        import 'package:http/http.dart' as http;

        class CoinRepository {
        static const String _baseUrl = 'https://min-api.cryptocompare.com/';

        
        }

3. Let’s now create a method inside the class called getCoins that will ask CryptoCompare for a list of the top 25 crypto coins out there. This method will return a Future<List>. Don’t worry about the Coin model for now. We will define its model later in the lesson.


        Future<List<Coin>> getCoins() async {

        }

4. To start fetching let’s define our request URL inside the method:

        const requestUrl =
                '${_baseUrl}data/top/totalvolfull?limit=25&tsym=USD&page=0';

This URL is just a way CryptoCompare created for its users to get crypto prices easily. It hits the baseUrl we defined at a certain URL. Feel free to look at all the endpoints CryptoCompare makes available if you want to use them later on: https://min-api.cryptocompare.com/


5. Awesome! Now we will use HTTP Get request to request the list of coins we need. To do that we just need to call the get method of the HTTP client and provide the request URL we created above. It has to be in URI format, so we can use URI.parse to convert our request string to URI. Notice we will wrap in a try/catch in case it fails. If it fails, we will throw a DataError with a message.

        try {
            final response = await http.Client().get(Uri.parse(requestUrl));
        } catch (err) {
            throw DataError(message: err.toString());
        }


6. Now we must detect if the GET request was successful, so we will ask for the response of the status code. If the status code is 200, it means it is successful, else we will throw an exception. That’s a standard code in HTTP requests that usually demonstrates the request succeeded.

        try {
            final response = await http.Client().get(Uri.parse(requestUrl));
            if (response.statusCode == 200) {

            }
        else {
            throw Exception('Failed to load currencies');
        }
        } catch (err) {
            throw DataError(message: err.toString());
        }

7. If it succeeds, we will get the data inside of it by decoding. When some piece of data is delivered view HTTP requests, it is usually encoded in JSON format. Inside the data response, we need to get the content inside the ‘Data’ key and use it to create a Coin from each item in the list. The response that we get from their APIs provide a list of coins inside that key. Hence, we can use the .map to iterate through, convert the data into a coin format (which we will implement soon), and then convert it back to a list once we converted each data point. Don’t worry if you still don’t fully get this, we provided some additional comments.

        if (response.statusCode == 200) {
                final json = jsonDecode(response.body) as Map<String, dynamic>;
                final data = json['Data'] as List<dynamic>;
                return data.map((e) {
                return Coin.fromMap(e);
                }).toList();
            }

8. look at /coin repo in getCoins();



